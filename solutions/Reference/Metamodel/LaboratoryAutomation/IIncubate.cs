//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2021.LabWorkflows.LaboratoryAutomation
{
    
    
    /// <summary>
    /// The public interface for Incubate
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Incubate))]
    [XmlDefaultImplementationTypeAttribute(typeof(Incubate))]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/ttc21/laboratoryAutomation#//Incubate")]
    public interface IIncubate : IModelElement, IProtocolStep
    {
        
        /// <summary>
        /// The temperature property
        /// </summary>
        [DefaultValueAttribute(29315D)]
        [DisplayNameAttribute("temperature")]
        [CategoryAttribute("Incubate")]
        [XmlElementNameAttribute("temperature")]
        [XmlAttributeAttribute(true)]
        double Temperature
        {
            get;
            set;
        }
        
        /// <summary>
        /// The duration property
        /// </summary>
        [DisplayNameAttribute("duration")]
        [CategoryAttribute("Incubate")]
        [XmlElementNameAttribute("duration")]
        [XmlAttributeAttribute(true)]
        int Duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Temperature property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TemperatureChanging;
        
        /// <summary>
        /// Gets fired when the Temperature property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TemperatureChanged;
        
        /// <summary>
        /// Gets fired before the Duration property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DurationChanging;
        
        /// <summary>
        /// Gets fired when the Duration property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DurationChanged;
    }
}

