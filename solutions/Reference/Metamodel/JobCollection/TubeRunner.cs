//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2021.LabWorkflows.JobCollection
{
    
    
    /// <summary>
    /// The default implementation of the TubeRunner class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/ttc21/jobCollection")]
    [XmlNamespacePrefixAttribute("jobs")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/ttc21/jobCollection#//TubeRunner")]
    [DebuggerDisplayAttribute("TubeRunner {Name}")]
    public partial class TubeRunner : Labware, ITubeRunner, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Barcodes property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableOrderedSet<string> _barcodes;
        
        private static Lazy<ITypedElement> _barcodesAttribute = new Lazy<ITypedElement>(RetrieveBarcodesAttribute);
        
        private static IClass _classInstance;
        
        public TubeRunner()
        {
            this._barcodes = new ObservableOrderedSet<string>();
            this._barcodes.CollectionChanging += this.BarcodesCollectionChanging;
            this._barcodes.CollectionChanged += this.BarcodesCollectionChanged;
        }
        
        /// <summary>
        /// The barcodes property
        /// </summary>
        [UpperBoundAttribute(16)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("barcodes")]
        [CategoryAttribute("TubeRunner")]
        [XmlElementNameAttribute("barcodes")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<string> Barcodes
        {
            get
            {
                return this._barcodes;
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/ttc21/jobCollection#//TubeRunner")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveBarcodesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.LabWorkflows.JobCollection.TubeRunner.ClassInstance)).Resolve("barcodes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Barcodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BarcodesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Barcodes", e, _barcodesAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Barcodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BarcodesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Barcodes", e, _barcodesAttribute);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BARCODES"))
            {
                if ((index < this.Barcodes.Count))
                {
                    return this.Barcodes[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BARCODES"))
            {
                return this._barcodes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/ttc21/jobCollection#//TubeRunner")));
            }
            return _classInstance;
        }
    }
}

