//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2021.LabWorkflows.JobCollection
{
    
    
    /// <summary>
    /// The default implementation of the Job class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/ttc21/jobCollection")]
    [XmlNamespacePrefixAttribute("jobs")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/ttc21/jobCollection#//Job")]
    public abstract partial class Job : ModelElement, IJob, IModelElement
    {
        
        /// <summary>
        /// The backing field for the State property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private JobStatus _state;
        
        private static Lazy<ITypedElement> _stateAttribute = new Lazy<ITypedElement>(RetrieveStateAttribute);
        
        /// <summary>
        /// The backing field for the ProtocolStepName property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _protocolStepName;
        
        private static Lazy<ITypedElement> _protocolStepNameAttribute = new Lazy<ITypedElement>(RetrieveProtocolStepNameAttribute);
        
        private static Lazy<ITypedElement> _previousReference = new Lazy<ITypedElement>(RetrievePreviousReference);
        
        /// <summary>
        /// The backing field for the Previous property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private JobPreviousCollection _previous;
        
        private static Lazy<ITypedElement> _nextReference = new Lazy<ITypedElement>(RetrieveNextReference);
        
        /// <summary>
        /// The backing field for the Next property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private JobNextCollection _next;
        
        private static IClass _classInstance;
        
        public Job()
        {
            this._previous = new JobPreviousCollection(this);
            this._previous.CollectionChanging += this.PreviousCollectionChanging;
            this._previous.CollectionChanged += this.PreviousCollectionChanged;
            this._next = new JobNextCollection(this);
            this._next.CollectionChanging += this.NextCollectionChanging;
            this._next.CollectionChanged += this.NextCollectionChanged;
        }
        
        /// <summary>
        /// The state property
        /// </summary>
        [DisplayNameAttribute("state")]
        [CategoryAttribute("Job")]
        [XmlElementNameAttribute("state")]
        [XmlAttributeAttribute(true)]
        public JobStatus State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    JobStatus old = this._state;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStateChanging(e);
                    this.OnPropertyChanging("State", e, _stateAttribute);
                    this._state = value;
                    this.OnStateChanged(e);
                    this.OnPropertyChanged("State", e, _stateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The protocolStepName property
        /// </summary>
        [DisplayNameAttribute("protocolStepName")]
        [CategoryAttribute("Job")]
        [XmlElementNameAttribute("protocolStepName")]
        [XmlAttributeAttribute(true)]
        public string ProtocolStepName
        {
            get
            {
                return this._protocolStepName;
            }
            set
            {
                if ((this._protocolStepName != value))
                {
                    string old = this._protocolStepName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProtocolStepNameChanging(e);
                    this.OnPropertyChanging("ProtocolStepName", e, _protocolStepNameAttribute);
                    this._protocolStepName = value;
                    this.OnProtocolStepNameChanged(e);
                    this.OnPropertyChanged("ProtocolStepName", e, _protocolStepNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The previous property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("previous")]
        [CategoryAttribute("Job")]
        [XmlElementNameAttribute("previous")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("next")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IJob> Previous
        {
            get
            {
                return this._previous;
            }
        }
        
        /// <summary>
        /// The next property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("next")]
        [CategoryAttribute("Job")]
        [XmlElementNameAttribute("next")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("previous")]
        [ConstantAttribute()]
        public IOrderedSetExpression<IJob> Next
        {
            get
            {
                return this._next;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new JobReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/ttc21/jobCollection#//Job")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the State property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StateChanging;
        
        /// <summary>
        /// Gets fired when the State property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StateChanged;
        
        /// <summary>
        /// Gets fired before the ProtocolStepName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProtocolStepNameChanging;
        
        /// <summary>
        /// Gets fired when the ProtocolStepName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProtocolStepNameChanged;
        
        private static ITypedElement RetrieveStateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.LabWorkflows.JobCollection.Job.ClassInstance)).Resolve("state")));
        }
        
        /// <summary>
        /// Raises the StateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveProtocolStepNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.LabWorkflows.JobCollection.Job.ClassInstance)).Resolve("protocolStepName")));
        }
        
        /// <summary>
        /// Raises the ProtocolStepNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProtocolStepNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProtocolStepNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProtocolStepNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProtocolStepNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProtocolStepNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePreviousReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.LabWorkflows.JobCollection.Job.ClassInstance)).Resolve("previous")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Previous property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PreviousCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Previous", e, _previousReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Previous property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PreviousCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Previous", e, _previousReference);
        }
        
        private static ITypedElement RetrieveNextReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.LabWorkflows.JobCollection.Job.ClassInstance)).Resolve("next")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Next property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NextCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Next", e, _nextReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Next property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NextCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Next", e, _nextReference);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PREVIOUS"))
            {
                if ((index < this.Previous.Count))
                {
                    return this.Previous[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "NEXT"))
            {
                if ((index < this.Next.Count))
                {
                    return this.Next[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STATE"))
            {
                return this.State;
            }
            if ((attribute == "PROTOCOLSTEPNAME"))
            {
                return this.ProtocolStepName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PREVIOUS"))
            {
                return this._previous;
            }
            if ((feature == "NEXT"))
            {
                return this._next;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATE"))
            {
                this.State = ((JobStatus)(value));
                return;
            }
            if ((feature == "PROTOCOLSTEPNAME"))
            {
                this.ProtocolStepName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "STATE"))
            {
                return Observable.Box(new StateProxy(this));
            }
            if ((attribute == "PROTOCOLSTEPNAME"))
            {
                return new ProtocolStepNameProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/ttc21/jobCollection#//Job")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Job class
        /// </summary>
        public class JobReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Job _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public JobReferencedElementsCollection(Job parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Previous.Count);
                    count = (count + this._parent.Next.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Previous.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Next.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Previous.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Next.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IJob previousCasted = item.As<IJob>();
                if ((previousCasted != null))
                {
                    this._parent.Previous.Add(previousCasted);
                }
                IJob nextCasted = item.As<IJob>();
                if ((nextCasted != null))
                {
                    this._parent.Next.Add(nextCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Previous.Clear();
                this._parent.Next.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Previous.Contains(item))
                {
                    return true;
                }
                if (this._parent.Next.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> previousEnumerator = this._parent.Previous.GetEnumerator();
                try
                {
                    for (
                    ; previousEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = previousEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    previousEnumerator.Dispose();
                }
                IEnumerator<IModelElement> nextEnumerator = this._parent.Next.GetEnumerator();
                try
                {
                    for (
                    ; nextEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nextEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nextEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IJob jobItem = item.As<IJob>();
                if (((jobItem != null) 
                            && this._parent.Previous.Remove(jobItem)))
                {
                    return true;
                }
                if (((jobItem != null) 
                            && this._parent.Next.Remove(jobItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Previous).Concat(this._parent.Next).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the state property
        /// </summary>
        private sealed class StateProxy : ModelPropertyChange<IJob, JobStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StateProxy(IJob modelElement) : 
                    base(modelElement, "state")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override JobStatus Value
            {
                get
                {
                    return this.ModelElement.State;
                }
                set
                {
                    this.ModelElement.State = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the protocolStepName property
        /// </summary>
        private sealed class ProtocolStepNameProxy : ModelPropertyChange<IJob, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProtocolStepNameProxy(IJob modelElement) : 
                    base(modelElement, "protocolStepName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ProtocolStepName;
                }
                set
                {
                    this.ModelElement.ProtocolStepName = value;
                }
            }
        }
    }
}

