//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2021.LabWorkflows.JobCollection
{
    
    
    /// <summary>
    /// The public interface for TipLiquidTransfer
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TipLiquidTransfer))]
    [XmlDefaultImplementationTypeAttribute(typeof(TipLiquidTransfer))]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/ttc21/jobCollection#//TipLiquidTransfer" +
        "")]
    public interface ITipLiquidTransfer : IModelElement
    {
        
        /// <summary>
        /// The sourceCavityIndex property
        /// </summary>
        [DisplayNameAttribute("sourceCavityIndex")]
        [CategoryAttribute("TipLiquidTransfer")]
        [XmlElementNameAttribute("sourceCavityIndex")]
        [XmlAttributeAttribute(true)]
        int SourceCavityIndex
        {
            get;
            set;
        }
        
        /// <summary>
        /// The volume property
        /// </summary>
        [DisplayNameAttribute("volume")]
        [CategoryAttribute("TipLiquidTransfer")]
        [XmlElementNameAttribute("volume")]
        [XmlAttributeAttribute(true)]
        double Volume
        {
            get;
            set;
        }
        
        /// <summary>
        /// The targetCavityIndex property
        /// </summary>
        [DisplayNameAttribute("targetCavityIndex")]
        [CategoryAttribute("TipLiquidTransfer")]
        [XmlElementNameAttribute("targetCavityIndex")]
        [XmlAttributeAttribute(true)]
        int TargetCavityIndex
        {
            get;
            set;
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [DisplayNameAttribute("status")]
        [CategoryAttribute("TipLiquidTransfer")]
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        JobStatus Status
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the SourceCavityIndex property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SourceCavityIndexChanging;
        
        /// <summary>
        /// Gets fired when the SourceCavityIndex property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SourceCavityIndexChanged;
        
        /// <summary>
        /// Gets fired before the Volume property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolumeChanging;
        
        /// <summary>
        /// Gets fired when the Volume property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VolumeChanged;
        
        /// <summary>
        /// Gets fired before the TargetCavityIndex property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetCavityIndexChanging;
        
        /// <summary>
        /// Gets fired when the TargetCavityIndex property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetCavityIndexChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusChanged;
    }
}

