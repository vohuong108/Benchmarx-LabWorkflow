//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2021.LabWorkflows.JobCollection
{
    
    
    /// <summary>
    /// The default implementation of the WashJob class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/ttc21/jobCollection")]
    [XmlNamespacePrefixAttribute("jobs")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/ttc21/jobCollection#//WashJob")]
    public partial class WashJob : Job, IWashJob, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Cavities property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableOrderedSet<int> _cavities;
        
        private static Lazy<ITypedElement> _cavitiesAttribute = new Lazy<ITypedElement>(RetrieveCavitiesAttribute);
        
        private static Lazy<ITypedElement> _microplateReference = new Lazy<ITypedElement>(RetrieveMicroplateReference);
        
        /// <summary>
        /// The backing field for the Microplate property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IMicroplate _microplate;
        
        private static IClass _classInstance;
        
        public WashJob()
        {
            this._cavities = new ObservableOrderedSet<int>();
            this._cavities.CollectionChanging += this.CavitiesCollectionChanging;
            this._cavities.CollectionChanged += this.CavitiesCollectionChanged;
        }
        
        /// <summary>
        /// The cavities property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("cavities")]
        [CategoryAttribute("WashJob")]
        [XmlElementNameAttribute("cavities")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<int> Cavities
        {
            get
            {
                return this._cavities;
            }
        }
        
        /// <summary>
        /// The microplate property
        /// </summary>
        [DisplayNameAttribute("microplate")]
        [CategoryAttribute("WashJob")]
        [XmlElementNameAttribute("microplate")]
        [XmlAttributeAttribute(true)]
        public IMicroplate Microplate
        {
            get
            {
                return this._microplate;
            }
            set
            {
                if ((this._microplate != value))
                {
                    IMicroplate old = this._microplate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMicroplateChanging(e);
                    this.OnPropertyChanging("Microplate", e, _microplateReference);
                    this._microplate = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMicroplate;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMicroplate;
                    }
                    this.OnMicroplateChanged(e);
                    this.OnPropertyChanged("Microplate", e, _microplateReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WashJobReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/ttc21/jobCollection#//WashJob")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Microplate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MicroplateChanging;
        
        /// <summary>
        /// Gets fired when the Microplate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MicroplateChanged;
        
        private static ITypedElement RetrieveCavitiesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.LabWorkflows.JobCollection.WashJob.ClassInstance)).Resolve("cavities")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Cavities property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CavitiesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Cavities", e, _cavitiesAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Cavities property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CavitiesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Cavities", e, _cavitiesAttribute);
        }
        
        private static ITypedElement RetrieveMicroplateReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2021.LabWorkflows.JobCollection.WashJob.ClassInstance)).Resolve("microplate")));
        }
        
        /// <summary>
        /// Raises the MicroplateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMicroplateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MicroplateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MicroplateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMicroplateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MicroplateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Microplate property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMicroplate(object sender, System.EventArgs eventArgs)
        {
            this.Microplate = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "MICROPLATE"))
            {
                return this.Microplate;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CAVITIES"))
            {
                if ((index < this.Cavities.Count))
                {
                    return this.Cavities[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CAVITIES"))
            {
                return this._cavities;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MICROPLATE"))
            {
                this.Microplate = ((IMicroplate)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MICROPLATE"))
            {
                return new MicroplateProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/ttc21/jobCollection#//WashJob")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the WashJob class
        /// </summary>
        public class WashJobReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private WashJob _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WashJobReferencedElementsCollection(WashJob parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Microplate != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MicroplateChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MicroplateChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Microplate == null))
                {
                    IMicroplate microplateCasted = item.As<IMicroplate>();
                    if ((microplateCasted != null))
                    {
                        this._parent.Microplate = microplateCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Microplate = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Microplate))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Microplate != null))
                {
                    array[arrayIndex] = this._parent.Microplate;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Microplate == item))
                {
                    this._parent.Microplate = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Microplate).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the microplate property
        /// </summary>
        private sealed class MicroplateProxy : ModelPropertyChange<IWashJob, IMicroplate>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MicroplateProxy(IWashJob modelElement) : 
                    base(modelElement, "microplate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMicroplate Value
            {
                get
                {
                    return this.ModelElement.Microplate;
                }
                set
                {
                    this.ModelElement.Microplate = value;
                }
            }
        }
    }
}

